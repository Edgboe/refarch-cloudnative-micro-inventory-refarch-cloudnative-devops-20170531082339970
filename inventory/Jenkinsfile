podTemplate(label: 'pod',
    volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
              secretVolume(secretName: 'bluemix-api-key', mountPath: '/var/run/secrets/bluemix-api-key'),
              configMapVolume(configMapName: 'bluemix-target', mountPath: '/var/run/configs/bluemix-target')],
    containers: [
        containerTemplate(name: 'java', image: 'openjdk:8-jdk-alpine', alwaysPullImage: true, ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'bluemix-image-deploy', alwaysPullImage: true, ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm:v2.3.1', alwaysPullImage: true, ttyEnabled: true, command: 'cat')
    ]) {

    node ('pod') {

        stage('Build') {
            checkout scm
            container('java') {
                stage('Build Gradle Project') {
                    sh """
                    #!/bin/bash
                    cd inventory
                    ./gradlew build -x test
                    ./gradlew docker
                    """
                }
            }
        }

        stage('Docker') {
            container('docker') {
                stage ('Build Docker Image') {
                    sh """
                    #!/bin/bash
                    cd inventory/docker
                    docker build -t registry.ng.bluemix.net/kyanite-int/bc-inventory:\${env.BUILD_NUMBER} .
                    """
                }
                stage ('Push Docker Image to Registry') {
                    sh """
                    #!/bin/bash
                    export BLUEMIX_API_KEY=`cat /var/run/secrets/bluemix-api-key/api-key`
                    export BX_SPACE=`cat /var/run/configs/bluemix-target/bluemix-api-endpoint`
                    export BX_API_ENDPOINT=`cat /var/run/configs/bluemix-target/api-key`
                    source /login.sh

                    docker push registry.ng.bluemix.net/kyanite-int/bc-inventory:\${env.BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Chart') {
            container('chart') {
                stage ('Install Chart') {
                    sh """
                    #!/bin/bash
                    helm init

                    # Edit chart values using yaml (NEED TO INSTALL YAML) - Call image chart deployer
                    cd inventory/chart/bc-inventory
                    build_number=\${env.BUILD_NUMBER}
                    string_to_replace=`yaml read values.yaml image.tag`
                    sed -i.bak s%${string_to_replace}%$build_number%g values.yaml

                    cd ..

                    # Install Chart
                    release=`helm list | grep inventory | awk '{print \$1}' | head -1`

                    if [[ -z \"${release// }\" ]]; then
                        # Install Chart
                        echo -e 'Installing inventory chart for the first time'
                        helm install bc-inventory

                    else
                        # Upgrade Chart Release
                        echo -e 'Upgrading inventory chart release'
                        helm upgrade \${release} bc-inventory
                    fi

                    # Delete all helm jobs for this chart
                    cd bc-inventory
                    chart_name=`yaml read Chart.yaml name`
                    chart_version=`yaml read Chart.yaml version`

                    helm delete jobs -l chart=\${chart_name}-\${chart_version}

                    """
                }
            }
        }
    }
}